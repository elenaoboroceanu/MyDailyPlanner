@model DailyPlanner.DomainClasses.Toy

@* This partial view defines form fields that will appear when creating and editing entities *@

<div class="form-group">
    @Html.LabelFor(model => model.Name, new { @class = "control-label col-xs-2" })
    <div class="col-xs-10">
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name)
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Code, new { @class = "control-label col-xs-2" })
    <div class="col-xs-10">
        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Code)
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Description, new { @class = "control-label col-xs-2" })
    <div class="col-xs-10">
        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Description)
    </div>
</div>

<div class="form-group">
    <label class="control-label col-xs-2">
        Toy type
    </label>
    <div class="col-xs-10">
        @Html.DropDownListFor(model => model.ToyTypeId, ((IEnumerable<DailyPlanner.DomainClasses.ToyType>)ViewBag.PossibleToyTypes).Select(option => new SelectListItem
        {
            Text = (option == null ? "None" : option.Name),
            Value = option.Id.ToString(),
            Selected = (Model != null) && (option.Id == Model.ToyTypeId)
        }), "Choose...", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ToyTypeId)
    </div>
</div>